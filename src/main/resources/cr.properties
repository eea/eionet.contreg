## NOTE:
## All these settings can be overriden at runtime by environment variables. See chapter 8 of README.md for more info

# The application's display name
application.displayName=${config.application.displayName}

# indicates the application current version
application.version=3.0

# the User-Agent to expose when doing web crawling
application.userAgent=Content Registry/{0}

# Folder, where other files and subfolders will be stored
app.home=${config.app.home}

# indicates if this is production environment (there might be some extra functions in UI in non-production environment)
environment.production=false

# location of the folder where harvester collects its temporary files
harvester.tempFileDir=${config.harvester.tempFileDir}

# the clock hours (0-23) when batch harvesting should be active, given as comma separated from-to spans (e.g 10-15, 19-23),
# where in every span both from and to are inclusive and there must be from<=to (so, to say from 18.00 to 9.00 you must write 18-23,0-8)
# (leave completely empty to disable any batch harvesting)
harvester.batchHarvestingHours=${config.harvester.batchHarvestingHours}

# Interval at which CR runs the harvesting job. The latter checks for new urgent/scheduled harvests and does other stuff.
harvester.jobInterval=${config.harvester.jobInterval}

# Upper limit for the number of sources that are harvested in each interval. Default is 5.
harvester.batchHarvestingUpperLimit=${config.harvester.batchHarvestingUpperLimit}

# Upper limit for the number of urgent harvests performed at one interval. Default is 20.
harvester.urgentHarvestsPerInterval=${config.harvester.urgentHarvestsPerInterval}

# Default harvest interval for auto-discovered sources or in situations where the interval cannot be asked from user.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
harvester.defaultHarvestInterval=${config.harvester.defaultHarvestInterval}

# Maximum content length of harvested sources. If not specified, no limitations to the content length will be applied.
harvester.maximumContentLength=${config.harvester.maximumContentLength}

# The timeout that harvester will feed into java.net.URLConnection's setConnectTimeout() and setReadTimeout()
# when connecting to a source. If no value specified here, the default (3600000 ms) will be applied.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
harvester.httpConnection.timeout=${config.harvester.httpConnection.timeout}

# properties for CR CAS filter configuration
edu.yale.its.tp.cas.client.filter.loginUrl=${config.edu.yale.its.tp.cas.client.filter.loginUrl}
edu.yale.its.tp.cas.client.filter.validateUrl=${config.edu.yale.its.tp.cas.client.filter.validateUrl}
edu.yale.its.tp.cas.client.filter.serverName=${config.edu.yale.its.tp.cas.client.filter.serverName}
edu.yale.its.tp.cas.client.filter.wrapRequest=true

# XmlConv's URL where CR can get the list of conversion for a given schema
xmlconv.listConversions.url=https://converters.eionet.europa.eu/api/listConversions?schema={0}

# The GET request that does the XML-to-RDF conversion
xmlconv.convert.url=https://converters.eionet.europa.eu/api/convert?convert_id={0}&url={1}

# The POST request that does the XML-to-RDF conversion
xmlconv.convertPush.url=https://converters.eionet.europa.eu/api/convertPush

# XmlConv's URL where CR can get a particular conversion's XSL by replacing {0} with the XSL file name
# it receives from xmlconv.listConversions.url in the first place.
xmlconv.xsl.url=https://converters.eionet.europa.eu/xsl/{0}

# Standard JavaMail (http://java.sun.com/products/javamail) properties that CR
# should use for sending error notification e-mails. For a complete reference see page 61 of
# http://java.sun.com/products/javamail/JavaMail-1.4.pdf.
# The mail.user and mail.password are not mandatory if the SMTP host does not require authentication.
# To turn off notifications, simply leave "mail.host" empty.
mail.transport.protocol=smtp
mail.store.protocol=smtp
mail.host=${config.mail.host}
mail.user=${config.mail.user}
mail.password=${config.mail.password}
mail.from=${config.mail.from}

# The comma-separated list of e-mail addresses of CR system administrators. Error
# notifications will be delivered to those addresses. This is NOT a standard JavaMail property!
mail.sysAdmins=${config.mail.sysAdmins}

# properties related to ObjectHashesFixer
ObjectHashesFixer.batchSize=1000
ObjectHashesFixer.noOfBatchesToRun=1

# Interval for updating the picklist in Delivery search.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
#deliverySearchPicklistCacheUpdateInterval=${deliverySearchPicklistCacheUpdateInterval}

# Interval for updating the cache of recently discovered files.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
recentDiscoveredFilesCacheUpdateInterval=${config.recentDiscoveredFilesCacheUpdateInterval}

# Interval for updating the cache of distinct rdf:types in CR triple store.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
typeCacheUpdateInterval=${config.typeCacheUpdateInterval}

# Interval for updating the tag cloud cache.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
tagCloudCacheUpdateInterval=${config.tagCloudCacheUpdateInterval}

# Cron schedule for updating rdf:type cache tables in database - this may take more than 15 minutes!
typeCacheTablesUpdateCronJob=${config.typeCacheTablesUpdateCronJob}

# MS-Excel exporter row limit.
exporter.xls.row.limit=3000

# TagCloud length for front page and tag search.
tagcloud.frontpage.size=30
tagcloud.tagsearch.size=1000

# URL that serves as local Virtuoso SPARQL endpoint.
virtuoso.sparql.endpoint=http://localhost:8890/sparql

# Virtuoso db connection properties.
virtuoso.db.drv=${config.virtuoso.db.drv}
virtuoso.db.url=${config.virtuoso.db.url}
virtuoso.db.usr=${config.virtuoso.db.usr}
virtuoso.db.pwd=${config.virtuoso.db.pwd}

# Database connection properties to be used by unit tests.
virtuoso.unittest.db.url=${config.virtuoso.unittest.db.url}
virtuoso.unittest.db.drv=${config.virtuoso.unittest.db.drv}
virtuoso.unittest.db.usr=${config.virtuoso.unittest.db.usr}
virtuoso.unittest.db.pwd=${config.virtuoso.unittest.db.pwd}

#RO user for Sandbox etc
virtuoso.db.rousr=${config.virtuoso.db.rousr}
virtuoso.db.ropwd=${config.virtuoso.db.ropwd}

#General ruleSet name for inferencing. Schema sources are added into that ruleset. Leave it blank, if inferencing is turned off.
virtuoso.cr.ruleset.name=CRInferenceRule

# The application's home URL. It should be a full URL up to the webapp context path (the latter being included).
# Examples:
#    http://127.0.0.1:8080/cr
#    http://cr.eionet.europa.eu
# This property is used to construct URLs of users' home directories. The latter, in turn, is used to construct
# URLs of user's registrations, bookmarks, etc.
application.homeURL=${config.application.homeURL}

# Full path to the file system folder where CR should store its user-uploaded files
filestore.path=${app.home}/files

# Running interval of the job that deletes temporary files created by the application.
# Not mandatory. Default values is 20000.
# Use time suffixes ms, s, m, h to specify time unit, no suffix defaults to ms value.
tempFileDeletionJob.interval=10000

# If false, the Central Authentication Service (CAS) is not used, and the properties that
# start with "edu.yale.its.tp.cas.client.filter." are ignored. In such a case, CR uses
# other authentication means provided by the eionetdir.propertis and local users file
# defined in uit.properties. By default the value of this property is true.
useCentralAuthenticationService=${config.useCentralAuthenticationService}

# Enable EEA specific functionality (true/false)
enableEEAFunctionality=${config.enableEEAFunctionality}

# Enable EEA template for SDS (true/false)
useEeaTemplate=${config.useEeaTemplate}
application.eea.template.folder=${config.application.eea.template.folder}

# Comma-separated list of hosts allowed to use CR's ping API (PingActionBean). Wildcards can be used. Can be left empty.
# The list is always prepended by the application with "localhost" and "127.0.0.1".
pingWhitelist=${config.pingWhitelist}

# Comma-separated list of hosts denied to use CR's ping API (PingActionBean). Wildcards can be used. Can be left empty.
# This list always overrides the pingWhiteList and the host is tested against blacklist before whitelist.
pingBlacklist=${config.pingBlacklist}

# The directory where CR should keep the files that will be available for creating staging databases. This property is mandatory
# if you want to use the "staging databases" functionality, otherwise not.
stagingFilesDir=${config.stagingFilesDir}

# Servlet response buffer size to be used for requests/responses that go via Stripes. The unit is number of bytes.
# May be left unspecified, in which case a default is assumed.
servletResponseBufferSize=${config.servletResponseBufferSize}

# Interval for the source deletion background job. Default is every 20000 ms, i.e. every 20 seconds.
sourceDeletionJob.interval=${config.sourceDeletionJob.interval}

# Comma-separated list of hours when the source deletion background job should be active (valid values are 0-23).
# The default is 19,20,21,22,23,0,1,2,3,4,5,6,7,15,16,17,18. Leave empty for disabling this job!
sourceDeletionJob.activeHours=${config.sourceDeletionJob.activeHours}

# Number of sources that the source deletion background job should delete during one run. Default is 20.
sourceDeletionJob.batchSize=${config.sourceDeletionJob.batchSize}

# Number of threads (ie CPUs) to use when loading large files in harvester. If not given, the program defaults to 1.
harvester.rdfLoaderThreads=${config.harvester.rdfLoaderThreads}

# File size (in bytes) threshold (exclusive) upon which the harvester will use transactional loading. Defaults to 500000000.
harvester.transactionalLoading.fileSizeThresholdBytes=${config.harvester.transactionalLoading.fileSizeThresholdBytes}

# Harvester loading duration threshold (in minutes) over which a checkpoint will be issued after loading. Defaults to 15.
harvester.checkpoint.loadingDurationThresholdMinutes=${config.harvester.checkpoint.loadingDurationThresholdMinutes}

# Ignore CR harvester redirects to login forms based on these URL substrings matching.
config.harvestSourcesExclusionSubstrings=credentials_cookie_auth require_login login_form
harvestSourcesExclusionSubstrings=${config.harvestSourcesExclusionSubstrings}

# If number of triples in source is above this threshold, no XORing should be applied by harvester.
# Defaults to 1000000000 (ie one billion) to ensure that by default XORing is always applied.
harvester.skipXoring.noOfTriplesThreshold=${config.harvester.skipXoring.noOfTriplesThreshold}

# If downloaded file size is above this bytes threshold, no XORing should be applied by harvester.
# Used only when the harvester cannot guess the number of triples for some reason (see harvester.skipXoring.noOfTriplesThreshold).
# Defaults to 1000000000000 (ie one terabyte) to ensure that by default XORing is always applied.
harvester.skipXoring.fileSizeBytesThreshold=${config.harvester.skipXoring.fileSizeThreshold}
